// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: q.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO "order" (name, amount)
VALUES ($1, $2)
RETURNING id, name, amount
`

type CreateOrderParams struct {
	Name   string `json:"name"`
	Amount int32  `json:"amount"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, arg.Name, arg.Amount)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM "order"
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrder, id)
	return err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT id, name, amount
FROM "order"
ORDER BY id
`

func (q *Queries) GetAllOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, getAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one
SELECT id, name, amount
FROM "order"
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE "order"
SET name = $2, amount = $3
WHERE id = $1
RETURNING id, name, amount
`

type UpdateOrderParams struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	Amount int32  `json:"amount"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder,
		arg.ID,
		arg.Name,
		arg.Amount,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Amount,
	)
	return i, err
}
